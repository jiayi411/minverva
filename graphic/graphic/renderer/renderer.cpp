/*
 *  renderer.cpp
 *  graphic
 *
 *  Created by jiayi on 26/03/2017.
 *  Copyright Â© 2017 jiayi. All rights reserved.
 *
 */

#include "renderer.h"

using namespace minerva;
using namespace minerva::graphic;

renderer::~renderer()
{
    _camera = nullptr;
}

void renderer::mi_check_glerror()
{
    mg_enum error = glGetError();
    if (error == GL_NO_ERROR) { return; }
    mi_log( "opengl error: %#x\n", error );
    
    if (error == GL_INVALID_VALUE) {
        mi_assert( 0 && "program is not a value generated by OpenGL." );
    } else if (error == GL_INVALID_OPERATION) {
        mi_assert( 0 && "program is not a program object or has not been successfully linked" );
    }
}

mg_uint renderer::bind_opengl_buffer( mg_uint type, mg_sizeiptr size, mg_void* buffer, mg_uint draw_type )
{
    mg_uint buffer_id;
    glGenBuffers(1, &buffer_id);
    glBindBuffer(GL_ARRAY_BUFFER, buffer_id);
    glBufferData(GL_ARRAY_BUFFER, size, buffer, GL_STATIC_DRAW);
    return buffer_id;
}

mg_uint renderer::generate_single_vao()
{
    GLuint vao_id;
    glGenVertexArrays(1, &vao_id);
    glBindVertexArray(vao_id);
    return vao_id;
}

void renderer::enable_bind_attrib_pointer( mg_uint index, mg_uint buffer_id, mg_int size, mg_void* offset_pointer )
{
    glEnableVertexAttribArray( index );
    glBindBuffer(GL_ARRAY_BUFFER, buffer_id );
    glVertexAttribPointer(index,
                          size,
                          GL_FLOAT,
                          GL_FALSE,
                          0,
                          (void*)offset_pointer
                          );
}

